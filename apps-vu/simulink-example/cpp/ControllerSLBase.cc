//
// Auto-generated by edu.vanderbilt.riaps.generator.ComponenetGenerator.xtend
//
#include <ControllerSLBase.h>

namespace sltest {
   namespace components {
      
      ControllerSLBase::ControllerSLBase(_component_conf &config, riaps::Actor &actor) : ComponentBase(config, actor) {
         
      }
      
      void ControllerSLBase::DispatchMessage(capnp::FlatArrayMessageReader* capnpreader, riaps::ports::PortBase *port,std::shared_ptr<riaps::MessageParams> params) {
         auto portName = port->GetPortName();
         
         if (portName == PORT_SUB_POSITION) {
            PositionType::Reader Position =
            capnpreader->getRoot<PositionType>();
            OnPosition(Position, port);
         }
         
      }
      
      void ControllerSLBase::DispatchInsideMessage(zmsg_t* zmsg, riaps::ports::PortBase* port) {
         //empty the header
      }
      
      bool ControllerSLBase::SendForce(capnp::MallocMessageBuilder &messageBuilder,
      ForceType::Builder &message) {
         std::cout<< "ControllerSLBase::SendForce()"<< std::endl;
         return SendMessageOnPort(messageBuilder, PORT_PUB_FORCE);
      }
      
      ControllerSLBase::~ControllerSLBase() {
         
      }
   }
}
