//
// Auto-generated by edu.vanderbilt.riaps.generator.ComponenetGenerator.xtend
//
#ifndef RIAPS_FW_CONTROLLERSL_H
#define RIAPS_FW_CONTROLLERSL_H

#include "ControllerSLBase.h"
#include <Controller.h>

namespace sltest {
   namespace components {
      
      class ControllerSL : public ControllerSLBase {
         
         public:
         
         ControllerSL(_component_conf &config, riaps::Actor &actor);
         
         
         virtual void OnPosition(const PositionType::Reader &message,
         riaps::ports::PortBase *port);
         
         void OnGroupMessage(const riaps::groups::GroupId& groupId, capnp::FlatArrayMessageReader& capnpreader, riaps::ports::PortBase* port);
         
         virtual ~ControllerSL();

         private:
            RT_MODEL_Controller_T Controller_M_;
            RT_MODEL_Controller_T *const Controller_M = &Controller_M_;/* Real-time model */
            B_Controller_T Controller_B;    /* Observable signals */
            DW_Controller_T Controller_DW;  /* Observable states */
            ExtU_Controller_T Controller_U; /* External inputs */
            ExtY_Controller_T Controller_Y; /* External outputs */


            void rt_OneStep(RT_MODEL_Controller_T *const Controller_M);

            
 
            
         
      };
   }
}

extern "C" riaps::ComponentBase* create_component(_component_conf&, riaps::Actor& actor);
extern "C" void destroy_component(riaps::ComponentBase*);


#endif //RIAPS_FW_CONTROLLERSL_H
