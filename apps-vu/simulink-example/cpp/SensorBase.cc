//
// Auto-generated by edu.vanderbilt.riaps.generator.ComponenetGenerator.xtend
//
#include <SensorBase.h>

namespace sltest {
   namespace components {
      
      SensorBase::SensorBase(_component_conf &config, riaps::Actor &actor) : ComponentBase(config, actor) {
         
      }
      
      void SensorBase::DispatchMessage(capnp::FlatArrayMessageReader* capnpreader, riaps::ports::PortBase *port,std::shared_ptr<riaps::MessageParams> params) {
         auto portName = port->GetPortName();
         if (portName == PORT_TIMER_CLOCK) {
            OnClock(port);
         }
         
         
      }
      
      void SensorBase::DispatchInsideMessage(zmsg_t* zmsg, riaps::ports::PortBase* port) {
         //empty the header
      }
      
      bool SensorBase::SendPosition(capnp::MallocMessageBuilder &messageBuilder,
      PositionType::Builder &message) {
         std::cout<< "SensorBase::SendPosition()"<< std::endl;
         return SendMessageOnPort(messageBuilder, PORT_PUB_POSITION);
      }
      
      SensorBase::~SensorBase() {
         
      }
   }
}
