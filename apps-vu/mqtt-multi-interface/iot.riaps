
struct MQTTPayload {
	desc: String;
    measurement: Double;
}

message MQTTSent_A: MQTTPayload;
message MQTTReceived_A: MQTTPayload;

message MQTTSent_B: MQTTPayload;
message MQTTReceived_B: MQTTPayload;

device MQTT_A(host="iot.eclipse.org", port=1883, qos=0, topic="riaps/test_A") {
    //uses {
    //	library mqtt;
    //}
    
    // Define messaging ports
    pub incoming : MQTTReceived_A;
    sub outgoing : MQTTSent_A;
    inside _incoming;
    timer clock 1000;
}

device MQTT_B(host="iot.eclipse.org", port=1883, qos=0, topic="riaps/test_B") {
    //uses {
    //	library mqtt;
    //}
    
    // Define messaging ports
    pub incoming : MQTTReceived_B;
    sub outgoing : MQTTSent_B;
    inside _incoming;
    timer clock 1000;
}


app IOT {
    component Publisher_A { 
      timer sampling 2000 ms;
      pub outgoing : MQTTSent_A; 
    }
    
    component Publisher_B { 
      timer sampling 1000 ms;
      pub outgoing : MQTTSent_B; 
    }

    component Subscriber_A {
      sub incoming : MQTTReceived_A;
    }
    
    component Subscriber_B {
      sub incoming : MQTTReceived_B;
    }

    actor IOTActor {
       local MQTTSent_A, MQTTReceived_A, MQTTSent_B, MQTTReceived_B;
       {  
          publisher_A : Publisher_A;
          subscriber_A: Subscriber_A;
          publisher_B : Publisher_B;
          subscriber_B: Subscriber_B;
          device mqtt_A : MQTT_A(host="iot.eclipse.org", port=1883, qos=0, topic="riaps/test_A")			
          device mqtt_B : MQTT_B(host="iot.eclipse.org", port=1883, qos=0, topic="riaps/test_B")
       }
    }
}
